/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find_max_val(vector<int> &arr, int si, int ei){
        int max_idx = si;
        for(int i=si+1;i<=ei;i++){
            if(arr[max_idx] < arr[i]){
                max_idx = i;
            }
        }
        return max_idx;
    }
    TreeNode* construct(vector<int> &arr, int si, int ei){
        if(si > ei) return nullptr;
        int max_val_idx = find_max_val(arr, si, ei);
        TreeNode* root = new TreeNode(arr[max_val_idx]);
        root->left = construct(arr, si, max_val_idx-1);
        root->right = construct(arr, max_val_idx+1, ei);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int n = nums.size();
        return construct(nums, 0, n-1);
    }
};
