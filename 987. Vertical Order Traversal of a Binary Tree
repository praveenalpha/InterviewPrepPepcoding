/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool comparator(pair<int, int>& a, pair<int, int>& b){
    if(a.second > b.second)
        return false;
    if(a.second < b.second)
        return true;
    if(a.first > b.first)
        return false;
    return true;
}
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        unordered_map<int, vector<pair<int, int>> > mp;
        
        int Min=INT_MAX, Max=INT_MIN, hl=0;
        queue<pair<TreeNode*, int >> q;
        q.push({root, 0});
        
        while(q.size() > 0){
            int size = q.size();
            while(size--){
                pair<TreeNode*, int> rnode = q.front();
                q.pop();
                Min = min(Min, rnode.second);
                Max = max(Max, rnode.second);
                
                mp[rnode.second].push_back({rnode.first->val, hl});
                if(rnode.first->left != nullptr)
                    q.push({rnode.first->left, rnode.second-1});
                if(rnode.first->right != nullptr)
                    q.push({rnode.first->right, rnode.second+1});
                
            }
            hl++;
        }
        vector<vector<int>> ans;
        for(int i=Min;i<=Max;i++){
            sort(mp[i].begin(), mp[i].end(), comparator);
            vector<int> sans;
            for(pair<int, int> p : mp[i]){
                sans.push_back(p.first);
            }
            ans.push_back(sans);
        }
        return ans;
        
    }
};
