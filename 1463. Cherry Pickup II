class Solution {
public:
    int cherry(vector<vector<int>>& grid, int r1,int c1,int r2,int c2, vector<vector<vector<vector<int>>>>& dp){
        int n1 = grid.size(), n2 = grid[0].size();
        if(r1 >= n1 || r2 >= n1 || c1 >= n2 || c1 < 0 || c2 >= n2 || c2 < 0)
            return INT_MIN;
        
        if(r1 == n1-1 && r2 == n1-1 )
        {
            if(c1 == c2){
                dp[r1][c1][r2][c2] = grid[r1][c1];
                return dp[r1][c1][r2][c2];
            }
            else{
                dp[r1][c1][r2][c2] = grid[r1][c1] + grid[r2][c2];
                return dp[r1][c1][r2][c2];
            }
            
        }
        if(dp[r1][c1][r2][c2] != -1)
            return dp[r1][c1][r2][c2];
        
        int ans = INT_MIN;
        for(int i=-1;i<=1;i++){
            for(int j=-1;j<=1;j++){
                int r1dash = r1 + 1;
                int c1dash = c1 + i;
                int r2dash = r2 + 1;
                int c2dash = c2 + j;
                ans = max(ans, cherry(grid, r1dash, c1dash, r2dash, c2dash, dp));
            }
        }
        
        if(r1 == r2 && c1 == c2){
            ans += grid[r1][c1];
        }
        else{
            ans += grid[r1][c1] + grid[r2][c2];
        }
        dp[r1][c1][r2][c2] = ans;
        return ans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n1 = grid.size(), n2=grid[0].size();
        vector<vector<vector<vector<int>>>> dp(n1, vector<vector<vector<int>>> (n2, vector<vector<int>> (n1, vector<int> (n2, -1))));
        return cherry(grid, 0, 0, 0, n2-1, dp);
    }
};
