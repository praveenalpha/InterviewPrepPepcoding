class triplet{
public:
    int i;
    int j;
    int dist;
    triplet(int i, int j, int dist){
        this->i = i;
        this->j = j;
        this->dist = dist;
    }
};
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n1 = mat.size(), n2 = mat[0].size();
        vector<vector<int>> ans(n1, vector<int> (n2));
        queue<triplet> q;
        
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                if(mat[i][j] == 0)
                    q.push(triplet(i, j, 0));
            }
        }
        
        while(q.size()){
            triplet rt = q.front();
            int i = rt.i, j = rt.j, dist = rt.dist;
            q.pop();
            
            if(j + 1 < n2){
                if(mat[i][j+1] == 1 && ans[i][j+1] == 0){
                    ans[i][j+1] = dist + 1;
                    q.push(triplet(i, j+1, dist+1));
                }       
            }
            
            if(i + 1 < n1){
                if(mat[i+1][j] == 1 && ans[i+1][j] == 0){
                    ans[i+1][j] = dist + 1;
                    q.push(triplet(i+1, j, dist+1));
                }     
            }
            
            if(j - 1 >= 0){
                if(mat[i][j-1] == 1 && ans[i][j-1] == 0){
                    ans[i][j-1] = dist + 1;
                    q.push(triplet(i, j-1, dist+1));
                }     
            }
            
            if(i - 1 >= 0){
                if(mat[i-1][j] == 1 && ans[i-1][j] == 0){
                    ans[i-1][j] = dist + 1;
                    q.push(triplet(i-1, j, dist+1));
                }     
            }
        }
        return ans;
    }
};
