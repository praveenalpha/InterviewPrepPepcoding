/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root,vector<int>& a){
        if(root == nullptr)
            return;
        inorder(root->left,a);
        a.push_back(root->val);
        inorder(root->right,a);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> lans;
        inorder(root1,lans);
        vector<int> rans;
        inorder(root2,rans);
        int i=0;
        int j=0;
        vector<int> ans;
        while(i<lans.size() && j<rans.size()){
            if(lans[i] <= rans[j]){
                ans.push_back(lans[i]);
                i++;
            }
            else{
                ans.push_back(rans[j]);
                j++;
            }
        }
        if(i == lans.size()){
            while(j!=rans.size()){
                ans.push_back(rans[j]);
                j++;
            }
        }
        else{
            while(i!=lans.size()){
                ans.push_back(lans[i]);
                i++;
            }
        }
        return ans;
    }
    
};
