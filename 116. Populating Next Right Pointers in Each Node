/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root ==nullptr)
            return nullptr;
        
        queue<Node*> q1;
        queue<Node*> q2;
        
        q1.push(root);
        while(q1.size()){
            int size = q1.size();
            while(size--){
                Node* curr = q1.front();
                q1.pop();
                Node* next = nullptr;
                if(q1.size() > 0){
                    next = q1.front();
                }
                curr->next = next;
                if(curr->left != nullptr)
                    q2.push(curr->left);
                if(curr->right != nullptr)
                    q2.push(curr->right);
                
            }
            q1 = q2;
            while(q2.size() != 0)
                q2.pop();
        }
        return root;   
    }
};
