class Solution {
public:
    int countPalindromicSubsequences(string &s) {
        int n = s.length();
        long long int mod=pow(10,9)+7;
        vector<vector<int>> dp(n, vector<int> (n));
        vector<int> prev(n);
        unordered_map<char, int> mp;
        for(int i=0;i<n;i++){
            char ch=s[i];
            if(mp.find(ch) == mp.end()){
                prev[i] = -1;
            }
            else
                prev[i] = mp[ch];
            mp[ch] = i;
        }
        unordered_map<char, int> mp1;
        vector<int> next(n);
        for(int i=n-1;i>=0;i--){
            char ch=s[i];
            if(mp1.find(ch) == mp1.end()){
                next[i] = -1;
            }
            else
                next[i] = mp1[ch];
            mp1[ch] = i;
        }
        
        for(int gap = 0;gap < n;gap++){
            for(int i=0,j=gap;j<n;i++,j++){
                if(gap == 0){
                    dp[i][j] = 1;
                }
                else if(gap == 0){
                    dp[i][j] = 2;
                }
                else{
                    char c1 = s[i], c2 = s[j];
                    if(c1 != c2){
                        dp[i][j] = (((dp[i+1][j]%mod + dp[i][j-1]%mod)%mod) - (dp[i+1][j-1]%mod) + mod)%mod;
                    }
                    else{
                        
                        if(prev[j] < next[i]){
                            dp[i][j]= ((((2%mod) * (dp[i+1][j-1]%mod) % mod))%mod  + (2%mod)) %mod;
                        }
                        else if(prev[j]==next[i]){
                            dp[i][j]=(((((2%mod)* (dp[i+1][j-1]%mod))%mod)%mod)+(1%mod))%mod;
                        }
                        else{
                            dp[i][j]=((((2%mod) * (dp[i+1][j-1]%mod))%mod) - (dp[next[i]+1][prev[j]-1]%mod) + mod)%mod;
                        }
                    }
                }
            }
        }
        return dp[0][n-1];
    }
};
