/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode* prev = nullptr;
        TreeNode* first = nullptr;
        TreeNode* second = nullptr;
        
        traverse(root, prev, first, second);
        
        int temp = first->val;
        first->val = second->val;
        second->val = temp;
        
    }
    
    void traverse(TreeNode* root,TreeNode* &prev,TreeNode* &first,TreeNode* &second){
        
        if(root->left != nullptr)
            traverse(root->left, prev, first, second);
        
        if(prev != nullptr){
            if(prev->val > root->val){
                if(first == nullptr){
                    first = prev;
                    second = root;
                }
                    
                else
                    second = root;
            }
        }
        prev = root;
        
        if(root->right != nullptr)
            traverse(root->right, prev, first, second);
    }
    
};
