/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int N) {
//         if(N == 1) {
//             TreeNode* root = new TreeNode(0);
//             vector<TreeNode*>base;
//             base.push_back(root);
//             return base;
//         }
        
//         for(int i=1;i<=N-1;i+=2) {
//             left;
//             right;
            
//             create self node
//                 for(left) {
//                     for(right) {
                        
//                     }
//                 }
//         }
        if(N == 1){
            TreeNode* root = new TreeNode(0);
            vector<TreeNode*> base;
            base.push_back(root);
            return base;
        }
        
        vector<TreeNode*> temp[N];
        for(int i=1;i<N;i+=2){
            temp[i] = allPossibleFBT(i);
        }
        
        vector<TreeNode*> ans;
        for(int i=1;i<N;i+=2){
            vector<TreeNode*> lans = temp[i];
            vector<TreeNode*> rans = temp[N-i-1];
            
            for(int j=0;j<lans.size();j++){
                for(int k=0;k<rans.size();k++){
                    TreeNode* root = new TreeNode(0);
                    root->left = lans[j];
                    root->right = rans[k];
                    ans.push_back(root);
                }
            }
        }
        return ans;
    }
};
