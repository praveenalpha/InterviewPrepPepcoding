// { Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


 // } Driver Code Ends
/* Structure of the linked list node is as
struct Node 
{
    int data;
    struct Node* next;
    Node(int x) { data = x;  next = NULL; }
};
*/


class Solution{
  public:
    //Function to sort the given linked list using Merge Sort.
    Node* midNode(Node* head){
        if(head == nullptr || head->next == nullptr)    return head;
        
        Node* slow = head;
        Node* fast = head;
        while(fast->next != nullptr && fast->next->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    Node* merge_two_sorted_ll(Node* l1, Node* l2){
        if(l1 == nullptr)   return l2;
        if(l2 == nullptr)   return l1;
        Node* head = new Node(-1);
        Node* temp = head;
        
        while(l1 != nullptr && l2 != nullptr){
            if(l1->data <= l2->data){
                Node* newNode = new Node(l1->data);
                temp->next = newNode;
                temp = temp->next;
                l1 = l1->next;
            }
            else{
                Node* newNode = new Node(l2->data);
                temp->next = newNode;
                temp = temp->next;
                l2 = l2->next;
            }
        }
        
        if(l1 == nullptr)
            temp->next = l2;
        if(l2 == nullptr)
            temp->next = l1;
        // cout<<head->next->data;
        return head->next;
    }
    Node* mergeSort(Node* head) {
        if(head == nullptr || head->next == nullptr)    return head;
        
        Node* mid = midNode(head);
        Node* right_head = mid->next;
        mid->next = nullptr;
        Node* l1 = mergeSort(head);
        Node* l2 = mergeSort(right_head);
        
        Node* ans = merge_two_sorted_ll(l1, l2);
        return ans;
    }
};


// { Driver Code Starts.

void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}  // } Driver Code Ends
