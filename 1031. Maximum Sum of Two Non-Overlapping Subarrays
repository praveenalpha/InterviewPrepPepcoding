class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        int n = A.size();
        vector<int> ltr(n, 0);
        vector<int> rtl(n, 0);
        int i=0, running_sum = 0;
        while(i < M){
            running_sum += A[i];
            i++;
        }
        ltr[i-1] = running_sum;
        while(i < n){
            running_sum -= A[i-M];
            running_sum += A[i];
            ltr[i] = running_sum;
            i++;
        }
        
        i=1;
        while(i < n){
            ltr[i] = max(ltr[i-1], ltr[i]);
            i++;
        }
        
        
        i = 0, running_sum = 0;
        while(i < M){
            running_sum += A[n-i-1];
            i++;
        }
        rtl[n-i] = running_sum;
        while(i < n){
            running_sum -= A[(n-i-1) + M];
            running_sum += A[n-i-1];
            rtl[n-1-i]=running_sum;
            i++;
        }
        
        i=1;
        while(i<n){
            rtl[n-1-i] = max(rtl[n-1-i], rtl[n-i]);
            i++;
        }
        
        int maxSum = 0;
        running_sum = 0;
        i=0;
        while(i<L){
            running_sum += A[i];
            i++;
        }
        maxSum = max(maxSum , (running_sum + rtl[i]));
        
        while(i < n){
            running_sum -= A[i-L];
            running_sum += A[i];
            if(i < n-1)
                maxSum = max(maxSum , (running_sum + rtl[i+1]));
            maxSum = max(maxSum,  (running_sum + ltr[i-L]));
            // cout<<maxSum<<" ";
            i++;
        }
        
        
        return maxSum;
    }
};
