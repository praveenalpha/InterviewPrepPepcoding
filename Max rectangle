// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX 1000


 // } Driver Code Ends
/*You are required to complete this method*/

class Solution{
  public:
    int max_area_histogram(int arr[], int m){
        vector<int> nsor(m);
        stack<int> st;
        for(int i=m-1;i>=0;i--){
            while(st.size() > 0 && arr[st.top()] >= arr[i]) st.pop();
            if(st.size() == 0)  nsor[i] = m;
            else    nsor[i] = st.top();
            st.push(i);
        }
        int ans = 0;
        while(st.size() > 0)    st.pop();
        vector<int> nsol(m);
        for(int i=0;i<m;i++){
            while(st.size() > 0 && arr[st.top()] >= arr[i]) st.pop();
            if(st.size() == 0)   nsol[i] = -1;
            else    nsol[i] = st.top();
            st.push(i);
        }
        for(int i=0;i<m;i++){
            ans = max(ans, arr[i] * (nsor[i] - nsol[i] - 1));
        }
        return ans;
    }
    int maxArea(int arr[MAX][MAX], int n, int m) {
        int ans = max_area_histogram(arr[0], m);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = arr[i][j] == 0 ? 0 : arr[i-1][j] + 1;
            }
            ans = max(ans, max_area_histogram(arr[i], m));
        }
        return ans;
    }
};


// { Driver Code Starts.
int main() {
    int T;
    cin >> T;

    int M[MAX][MAX];

    while (T--) {
        int n, m;
        cin >> n >> m;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> M[i][j];
            }
        }
        Solution obj;
        cout << obj.maxArea(M, n, m) << endl;
    }
}
  // } Driver Code Ends
