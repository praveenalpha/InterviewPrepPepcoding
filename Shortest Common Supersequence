// { Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function template for C++


class Solution
{
    public:
    //Function to find length of shortest common supersequence of two strings.
    int LCS(string& s1, string& s2, int m, int n, vector<vector<int>>& dp){
        if(m < 0 || n < 0)  return 0;
        if(dp[m][n] != -1)  return dp[m][n];
        if(s1[m] == s2[n]) return dp[m][n] = 1 + LCS(s1, s2, m-1, n-1, dp);
        return dp[m][n] = max(LCS(s1, s2, m-1, n, dp), LCS(s1, s2, m, n-1, dp));
    }
    int shortestCommonSupersequence(string& s1, string& s2, int m, int n)
    {
        vector<vector<int>> dp(m+1, vector<int> (n+1, -1));
        int lcs = LCS(s1, s2, m-1, n-1, dp);
        return m+n-lcs;
    }
};

// { Driver Code Starts.

int main()
{   
    
    int t;
    
    //taking total testcases
    cin >> t;
    while(t--){
    string X, Y;
    //taking String X and Y
	cin >> X >> Y;
	
	//calling function shortestCommonSupersequence()
	Solution obj;
	cout << obj.shortestCommonSupersequence(X, Y, X.size(), Y.size())<< endl;
    }
	return 0;
}

  // } Driver Code Ends
