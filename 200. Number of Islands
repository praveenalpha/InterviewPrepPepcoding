class Solution {
public:
    vector<vector<int>> directionVector = {{0,-1},{-1,0},{0,1},{1,0}};
    void DFS(int i,int j,int m,int n,vector<vector<char>>& grid){
        grid[i][j] = '0';
        for(int dir = 0 ; dir < 4 ; ++dir){
            int row = i + directionVector[dir][0];
            int col = j + directionVector[dir][1];
            if(row >= 0 && row < m && col >= 0 && col < n && grid[row][col] == '1')
                DFS(row,col,m,n,grid);
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int ans = 0;
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0;i<m;++i){
            for(int j = 0 ; j  <n ;++j){
                if(grid[i][j] == '1'){
                    DFS(i,j,m,n,grid);
                    ++ans;
                }
            }
        }
         return ans;   
    }
};
