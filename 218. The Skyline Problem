class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        int n = buildings.size();
        vector<pair<int, int>> allPoints; // first -> x & second -> y
        for(int i=0;i<n;i++){
            int x1 = buildings[i][0];
            int x2 = buildings[i][1];
            int y = buildings[i][2];
            
            allPoints.push_back({x1, -y});
            allPoints.push_back({x2, y});
        }
        
        sort(allPoints.begin(), allPoints.end());
        
        multiset<int, greater<int> > pq;
        int prevHeight = 0;
        pq.insert(0);
        vector<vector<int>> ans;
        // cout<<*pq.begin();
        for(pair<int, int> point : allPoints){
            int x = point.first;
            int y = point.second;
            if(y < 0){
                prevHeight = *pq.begin();
                if(prevHeight < abs(y)){
                    ans.push_back({x, abs(y)});
                }    
                pq.insert(abs(y));

            }
            else{
                pq.erase(pq.find(y));
                int nextPotentialHeight = *pq.begin();
                if(y > nextPotentialHeight){
                    ans.push_back({x, nextPotentialHeight});
                    
                }
            }
        }
        
        
        return ans;
    }
};
