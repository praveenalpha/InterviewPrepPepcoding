/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == nullptr) return head;
        ListNode* slow = head;
        ListNode* fast = head;
        bool check = false;
        while(fast != nullptr && fast->next!=nullptr){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){
                check = true;
                break;
            }
        }
        if(check){
            slow = head;
            while(slow != fast){
                slow=slow->next;
                fast=fast->next;
            }
            return slow;
        }
        return nullptr;
    }
};
