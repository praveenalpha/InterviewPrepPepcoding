/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<TreeNode*, TreeNode*> solve(TreeNode* root){
        if(root == nullptr) return {nullptr, nullptr};
        if(root->left == nullptr && root->right == nullptr)   return {root, root};
        pair<TreeNode*, TreeNode*> l = solve(root->left);
        pair<TreeNode*, TreeNode*> r = solve(root->right);
        if(l.first == nullptr)  return {root, r.second};
        root->left = nullptr;
        root->right = l.first;
        if(r.first == nullptr)  return {root, l.second};
        l.second->right = r.first;
        return {root, r.second};
    }
    void flatten(TreeNode* root) {
        solve(root);
    }
};
