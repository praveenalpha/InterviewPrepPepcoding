/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root, int &ans){
        if(root == nullptr) return 0;
        if(root->left == nullptr && root->right == nullptr) return -1;   
        int l_ans = solve(root->left, ans);
        int r_ans = solve(root->right, ans);
        if(l_ans == -1 || r_ans == -1){
            ans++;
            return 1;
        }
        if(l_ans == 1 || r_ans == 1)    return 0;
        return -1;
    }
    int minCameraCover(TreeNode* root) {
        int ans = 0;
        int root_ans = solve(root, ans);
        if(root_ans == -1)  return ans+1;
        return ans;
    }
};
