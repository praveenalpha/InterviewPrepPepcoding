/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, unordered_map<int, int> &mp){
        if(root == nullptr) return;
        mp[root->val]++;
        helper(root->left, mp);
        helper(root->right, mp);
    }
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> mp;
        helper(root, mp);
        unordered_map<int, int> :: iterator itr;
        vector<int> ans;
        int highest_freq = 0;
        for(itr = mp.begin(); itr != mp.end(); itr++){
            if(highest_freq < itr->second){
                highest_freq = itr->second;
                vector<int> new_ans;
                ans = new_ans;
            }
            if(highest_freq == itr->second){
                ans.push_back(itr->first);
            }
        }
        return ans;
    }
};
