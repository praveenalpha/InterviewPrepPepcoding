/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findMid(ListNode* head){
        if(head == nullptr || head->next == nullptr)    return head;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != nullptr && fast->next->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode* merge_two_sorted_ll(ListNode* l1, ListNode* l2){
        if(l1 == nullptr)   return l2;
        if(l2 == nullptr)   return l1;
        ListNode* ans = new ListNode(-1);
        ListNode* curr = ans;
        while(l1 != nullptr && l2 != nullptr){
            if(l1->val <= l2->val){
                ListNode* new_node = new ListNode(l1->val);
                curr->next = new_node;
                curr = curr->next;
                l1 = l1->next;
            }
            else{
                ListNode* new_node = new ListNode(l2->val);
                curr->next = new_node;
                curr = curr->next;
                l2 = l2->next;
            }
                
        }
        if(l1 == nullptr)   curr->next = l2;
        if(l2 == nullptr)   curr->next = l1;
        return ans->next;
    }
    ListNode* sortList(ListNode* head) {
        if(head == nullptr || head->next == nullptr)    return head;
        ListNode* mid = findMid(head);
        ListNode* new_head = mid->next;
        mid->next = nullptr;
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(new_head);
        return merge_two_sorted_ll(l1, l2);
    }
};
