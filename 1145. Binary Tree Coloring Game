/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findNode(TreeNode* root,int x){
        if(root == nullptr)
            return nullptr;
        if(root->val == x)
            return root;
        TreeNode* l = findNode(root->left,x);
        if(l != nullptr)
            return l;
        TreeNode* r = findNode(root->right,x);
        if(r != nullptr)
            return r;
        return nullptr;
    }
    int count(TreeNode* root){
        if(root == nullptr)
            return 0;
        int l = count(root->left);
        int r = count(root->right);
        return 1 + l + r ;
    }
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        TreeNode* xPos = findNode(root, x);
        int lc = count(xPos->left);
        int rc = count(xPos->right);
        int pc = n-lc-rc-1;
        n = n/2 ;
        return lc > n || rc > n || pc > n;
    }
};
