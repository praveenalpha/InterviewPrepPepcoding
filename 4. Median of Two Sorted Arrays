class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        int mask = 1;
        vector<int> merged(n+m);
        int i = 0 , j = 0, k = 0;
        while(i < n && j < m){
            if(nums1[i] <= nums2[j]){
                merged[k++] = nums1[i++];
            }
            else
                merged[k++] = nums2[j++];
        }
        while(i<n)
            merged[k++] = nums1[i++];
        while(j<m)
            merged[k++] = nums2[j++];
        double a1 = -1;
        if( ((n+m) & mask) == 0 ) //even
        {
            double a1 = merged[((n+m) >> 1)];
            double a2 = merged[((n+m) >> 1) - 1];
            return (a1 + a2) / 2;
        }
        else{
            a1 = merged[( n + m - 1 ) / 2] ;
        }
        return a1;
    }
};
