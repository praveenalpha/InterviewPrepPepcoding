// { Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.
Node* construct(int post[], int ps, int pe, int in[], int is, int ie){
    if(ps > pe || is > ie)
        return nullptr;
        
    Node* root = new Node(post[pe]);
    int idx = -1;
    for(int i=is;i<=ie;i++){
        if(post[pe] == in[i]){
            idx = i;
            break;
        }
    }
    
    int count = ie - idx;
    root->left = construct(post, ps, pe - count - 1, in, is, idx-1);
    root->right = construct(post, pe - count, pe-1, in, idx+1, ie);
    return root;
}
Node *buildTree(int in[], int post[], int n) {
    int ps = 0, pe = n-1, is = 0, ie = n-1;
    Node* root = construct(post, ps, pe, in, is, ie);
    return root;
}

