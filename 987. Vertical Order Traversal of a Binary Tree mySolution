/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool comparator(pair<TreeNode*, int>& a, pair<TreeNode*, int>& b){
        if(a.first->val > b.first->val)
            return false;
        return true;
    }
class Solution {
public:
    
    void helper(TreeNode* root, pair<int, int>& ans, int level){
        ans.first = min(ans.first, level);
        ans.second = max(ans.second, level);
        if(root->left != nullptr)
            helper(root->left, ans, level-1);
        if(root->right != nullptr)
            helper(root->right, ans, level+1);
        
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        pair<int, int> minMax;
        helper(root, minMax, 0);
        
        int width = minMax.second - minMax.first + 1;
        
        vector<vector<int>> ans(width, vector<int>());
        
        queue<pair<TreeNode*, int>> q;
        q.push({root, abs(minMax.first)});
        
        while(q.size() > 0){
            int size = q.size();
            vector<pair<TreeNode*, int>> sans;
            while(size--){
                pair<TreeNode*, int> rnode = q.front();
                q.pop();
                
                sans.push_back(rnode);
                
                if(rnode.first->left != nullptr)
                    q.push({rnode.first->left, rnode.second - 1});
                if(rnode.first->right != nullptr)
                    q.push({rnode.first->right, rnode.second + 1});
                
            }
            sort(sans.begin(), sans.end(), comparator);
            for(pair<TreeNode*, int> p : sans){
                ans[p.second].push_back(p.first->val);
            }
        }
        return ans;
    }
};























