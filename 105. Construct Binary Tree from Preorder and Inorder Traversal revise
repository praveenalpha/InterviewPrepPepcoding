/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// [3,9,20,15,7]
// [0,1,2,3,4,5]
// [9,3,15,20,7]
class Solution {
public:
    int find_val_in(int val, vector<int> &in, int si, int ei){
        for(int i=si;i<=ei;i++) if(val == in[i])    return i;
        return -1;
    }
    TreeNode* construct(int si_p, int ei_p, int si_i, int ei_i, vector<int> &pre, vector<int> &in){
        if(si_p > ei_p) return nullptr;
        if(si_p == ei_p)    return new TreeNode(pre[si_p]);
        TreeNode* root = new TreeNode(pre[si_p]);
        int idx = find_val_in(pre[si_p], in, si_i, ei_i);
        int length_of_ele = idx - si_i;
        root->left = construct(si_p+1, si_p+length_of_ele, si_i, idx-1, pre, in);
        root->right = construct(si_p+1+length_of_ele, ei_p, idx+1, ei_i, pre, in);
        return root;
    }
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
        int n = pre.size();
        return construct(0, n-1, 0, n-1, pre, in);
    }
};
