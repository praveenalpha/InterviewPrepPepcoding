// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


class Solution
{
    public:
    //Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        vector<int> prefix(n);
        prefix[0] = arr[0];
        for(int i=1;i<n;i++){
            if(i%k == 0)
                prefix[i] = arr[i];
            else
                prefix[i] = max(prefix[i-1], arr[i]);
        }
        
        vector<int> suffix(n);
        suffix[n-1] = arr[n-1];
        for(int i=n-2;i>=0;i--){
            if((i+1) % k == 0)
                suffix[i] = arr[i];
            else
                suffix[i] = max(suffix[i+1], arr[i]);
        }
        vector<int> ans;
        for(int i=0;i<=n-k;i++){
            ans.push_back(max(prefix[i+k-1], suffix[i]));
        }
        return ans;
    }
};

// { Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int n, k;
	    cin >> n >> k;
	    
	    int arr[n];
	    for(int i = 0;i<n;i++) 
	        cin >> arr[i];
	    Solution ob;
	    vector <int> res = ob.max_of_subarrays(arr, n, k);
	    for (int i = 0; i < res.size (); i++) 
	        cout << res[i] << " ";
	    cout << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends
