class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int freshOranges = 0;
        queue<pair<int, int>> q;
        int n1 = grid.size(), n2 = grid[0].size();
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                if(grid[i][j] == 2){
                    q.push({i, j});
                }
                else if(grid[i][j] == 1){
                    freshOranges++;
                }
            }
        }
        int level=0;
        while(q.size()){
            int size = q.size();
            while(size--){
                pair<int, int> rpair = q.front();
                q.pop();
                int i = rpair.first, j = rpair.second;
                cout<<"("<<i<<","<<j<<") ";
                if(i-1 >= 0 && grid[i-1][j] == 1){
                    grid[i-1][j] = 2;
                    q.push({i-1, j});
                    freshOranges--;
                }
                if(j + 1 < n2 && grid[i][j+1] == 1){
                    grid[i][j+1] = 2;
                    q.push({i, j+1});
                    freshOranges--;
                }
                if(i + 1 < n1 && grid[i+1][j] == 1){
                    grid[i+1][j] = 2;
                    q.push({i+1, j});
                    freshOranges--;
                }
                if(j - 1 >= 0 && grid[i][j-1] == 1){
                    grid[i][j-1] = 2;
                    q.push({i, j-1});
                    freshOranges--;
                }
            }
            level++;
        }
        if(freshOranges > 0)
            return -1;
            
        if(level == 0)
            return 0;
        return level-1;
        
    }
};
