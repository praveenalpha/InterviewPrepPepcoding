/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findNode(TreeNode* root, int x){
        if(root->val == x)
            return root;
        
        TreeNode* node = nullptr;
        
        if(root->left != nullptr)
            node = findNode(root->left, x);
        
        if(node != nullptr)
            return node;
        
        if(root->right != nullptr)
            node = findNode(root->right, x);
        
        return node;
    }
    
    void dfs(TreeNode* root, int& oppNodes){
        oppNodes++;
        if(root->left != nullptr)
            dfs(root->left, oppNodes);
        if(root->right != nullptr)
            dfs(root->right, oppNodes);
        
    }
    
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        TreeNode* startNode = findNode(root, x);
        
        if(startNode == nullptr)
            return false;
        
        int leftNodes = 0, rightNodes = 0, parentNodes = 0;
        
        if(startNode->left != nullptr)
            dfs(startNode->left, leftNodes);
        
        if(leftNodes > n/2)
            return true;
        
        if(startNode->right != nullptr)
            dfs(startNode->right, rightNodes);
        
        if(rightNodes > n/2)
            return true;
        
        parentNodes = n - (leftNodes + rightNodes + 1 ) ;
        
        if(parentNodes > n/2)
            return true;
        
        return false;
    }
};








































