// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    
    
    int ed(int e, int f, vector<vector<int>>& dp){
        
        if(e == 0 || f == 0){
            return 0;
        }
        if(e == 1)
            return f;
        if(dp[e][f] != -1)
            return dp[e][f];
        int ans = INT_MAX;
        for(int Floor = 1;Floor<=f;Floor++){
            
            int burst = ed(e-1, Floor-1,dp);
            int saved = ed(e, f - Floor,dp);
            
            int currVal = max(burst, saved);
            ans = min(ans, currVal);
            
        }
        dp[e][f] = ans+1;
        return ans+1;
    }
    
    int eggDrop(int e, int f) 
    {   
        vector<vector<int>> dp(e+1, vector<int> (f+1,-1));
        return ed(e, f,dp);
    }
};

// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking eggs and floors count
        int n, k;
        cin>>n>>k;
        Solution ob;
        //calling function eggDrop()
        cout<<ob.eggDrop(n, k)<<endl;
    }
    return 0;
}
  // } Driver Code Ends
