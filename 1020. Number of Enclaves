class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int ans = 0, n1 = grid.size(), n2 = grid[0].size();
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                if(i == 0 && grid[i][j] == 1){
                    dfs(grid, i, j, n1, n2);
                }
                else if(j == 0 && grid[i][j] == 1){
                    dfs(grid, i, j, n1, n2);
                }
                else if(i == n1-1 && grid[i][j] == 1){
                    dfs(grid, i, j, n1, n2);
                }
                else if( j == n2 - 1 && grid[i][j] == 1){
                    dfs(grid, i, j, n1, n2);
                }
            }
        }
        for(int i=0;i<n1;i++){
            for(int j=0;j<n2;j++){
                // cout<<grid[i][j]<<" ";
                if(grid[i][j] == 1)
                    ans++;
            }
            // cout<<endl;
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid, int i, int j, int n1, int n2){
        grid[i][j] = 0;
        if(i - 1 >= 0 && grid[i-1][j] == 1){
            dfs(grid, i-1, j, n1, n2);
        }
        if( j + 1 < n2 && grid[i][j+1] == 1){
            dfs(grid, i, j+1, n1, n2);
        }
        if(i+1 < n1 && grid[i+1][j] == 1){
            dfs(grid, i+1, j, n1, n2);
        }
        if(j- 1 >= 0 && grid[i][j-1] == 1){
            dfs(grid, i, j-1, n1, n2);
        }
    }
};
