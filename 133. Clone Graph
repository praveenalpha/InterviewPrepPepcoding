/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    void dfs(Node* node, unordered_map<Node*, Node*>& mp){
        if(mp.find(node) != mp.end())   return;
        Node* nn = new Node(node->val);
        mp[node] = nn;
        for(Node* nbr : node->neighbors){
            dfs(nbr, mp);
            nn->neighbors.push_back(mp[nbr]);
        }
    }
    Node* cloneGraph(Node* node) {
        if(node == nullptr) return nullptr;
        unordered_map<Node*, Node*> mp;
        dfs(node, mp);
        return mp[node];
    }
};
