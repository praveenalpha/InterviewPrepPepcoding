class Solution {
public:
    int kthSmallest(vector<vector<int>>& arr, int k) {
        priority_queue<pair<int, vector<int>>, vector<pair<int, vector<int>>>, greater<pair<int, vector<int>>> > pq;
        int n = arr.size(), m = arr[0].size();
        set<vector<int>> st;
        int sum=0, ans=0;
        vector<int> v;
        for(int i=0;i<n;i++){
            sum += arr[i][0];
            v.push_back(0);
        }
        pq.push({sum, v});
        st.insert(v);
        ans = sum;
        while(k--){
            pair<int, vector<int>> rn = pq.top();
            vector<int> rv = rn.second;
            // cout<<arr[0][rv[0]]<<","<<arr[1][rv[1]]<<" ";

            pq.pop();
            ans = rn.first;
            // cout<<ans<<" ";

            for(int i=0;i<n;i++){
                if(rv[i] + 1 < m){
                    vector<int> nv = rv;
                    nv[i] = nv[i] + 1;
                    if(st.find(nv) == st.end()){
                        pq.push({rn.first - arr[i][rv[i]] + arr[i][rv[i]+1], nv});
                        st.insert(nv);
                    }
                }
            }
            if(pq.size() == 0)  return ans;
        }
        return ans;
    }
};
