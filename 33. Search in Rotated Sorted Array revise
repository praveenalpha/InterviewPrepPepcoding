class Solution {
public:
    int fp(vector<int>& arr, int l, int r){
        int n = arr.size();
        while(l <= r){
            int mid = l + (r-l)/2;
            if(mid > 0 && mid < n-1){
                if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1])  return mid;
                else if(arr[mid] >=arr[l])  l = mid+1;
                else    r = mid-1;
            }
            else if(mid == 0){
                if(arr[0] > arr[1]) return 0;
                return 1;
            }
            else{
                if(arr[n-1] > arr[n-2]) return n-1;
                return n-2;
            }
        }
        return -1;
    }
    int bs(vector<int>& arr, int l, int r, int x){
        while(l <= r){
            int mid = l + (r-l)/2;
            if(arr[mid] == x)   return mid;
            else if(arr[mid] < x)   l = mid+1;
            else r = mid-1;
        }
        return -1;
    }
    int search(vector<int>& arr, int x) {
        int n = arr.size();
        if(n == 1)  return arr[0] == x ? 0 : -1;
        int pi = fp(arr, 0, n-1);
        int ans = bs(arr, 0, pi, x);
        if(ans != -1)   return ans;
        return bs(arr, pi+1, n-1, x);
    }
};
