// { Driver Code Starts
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <stack>
using namespace std;
/* Link list Node */
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};




 // } Driver Code Ends
/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution{
  public:
    //Function to check whether the list is palindrome.
    Node* midNode(Node* head){
        if(head == nullptr || head->next == nullptr)    return head;
        Node* slow = head;
        Node* fast = head;
        while(fast->next != nullptr && fast->next->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    Node* reverse(Node* head){
        if(head == nullptr || head->next == nullptr)    return head;
        Node* prev = nullptr;
        Node* curr = head;
        Node* frwd = head->next;
        while(frwd != nullptr){
            curr->next = prev;
            prev = curr;
            curr = frwd;
            frwd = frwd->next;
        }
        curr->next = prev;
        return curr;
    }
    bool isPalindrome(Node *head)
    {
        if(head == nullptr || head->next == nullptr)    return true;
        // s1: find mid;
        Node* mid = midNode(head);
        // s2: reverse 2nd half
        Node* new_head = reverse(mid->next);
        // iterate and solve
        while(new_head != nullptr){
            if(head->data != new_head->data)    return false;
            new_head = new_head->next;
            head = head->next;
        }   
        return true;
    }
};



// { Driver Code Starts.
/* Driver program to test above function*/
int main()
{
  int T,i,n,l,firstdata;
    cin>>T;
    while(T--)
    {
        
        struct Node *head = NULL,  *tail = NULL;
        cin>>n;
        // taking first data of LL
        cin>>firstdata;
        head = new Node(firstdata);
        tail = head;
        // taking remaining data of LL
        for(i=1;i<n;i++)
        {
            cin>>l;
            tail->next = new Node(l);
            tail = tail->next;
        }
    Solution obj;
   	cout<<obj.isPalindrome(head)<<endl;
    }
    return 0;
}

  // } Driver Code Ends
