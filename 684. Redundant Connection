class Solution {
public:
    vector<int> parent;
    vector<int> rank;
    vector<int> ans;
    int findPar(int x){
        if(parent[x] == x)
            return x;
        parent[x] = findPar(parent[x]);
        return parent[x];
    }
    void dsu(int u, int v){
        int leaderOfU = findPar(u);
        int leaderOfV = findPar(v);
        
        if(leaderOfU != leaderOfV){
            if(rank[leaderOfU] > rank[leaderOfV]){
                parent[leaderOfV] = leaderOfU;
            }
            else if(rank[leaderOfU] < rank[leaderOfV]){
                parent[leaderOfU] = leaderOfV;
            }
            else{
                parent[leaderOfU] = leaderOfV;
                rank[leaderOfV]++;
            }
        }
        else{
            ans.push_back(u+1);
            ans.push_back(v+1);
            
        }
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        ans.resize(0);
        parent.resize(n);
        rank.resize(n);
        for(int i=0;i<n;i++){
            parent[i] = i;
        }
        
        for(vector<int> edge: edges){
            int u = edge[0], v = edge[1];
            dsu(u-1, v-1);
            if(ans.size())
                return ans;
        }
        return ans;
    }
};
