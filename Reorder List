// { Driver Code Starts
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
/* Linked list Node */
struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

void reorderList(struct Node* head);

/* Function to create a new Node with given data */
struct Node* newNode(int data) {
    struct Node* new_Node = new Node(data);
    new_Node->data = data;
    new_Node->next = NULL;
    return new_Node;
}

void printList(struct Node* Node) {
    while (Node != NULL) {
        printf("%d ", Node->data);
        Node = Node->next;
    }
    printf("\n");
}

void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {

        temp = head;
        head = head->next;
        free(temp);
    }
}

int main(void) {
    int t, n, m, i, x;

    cin >> t;
    while (t--) {
        struct Node* temp, *head;
        cin >> n;
        cin >> x;
        head = new Node(x);
        temp = head;
        for (i = 0; i < n - 1; i++) {
            cin >> x;
            temp->next = new Node(x);
            temp = temp->next;
        }

        reorderList(head);
        printList(head);
        freeList(head);
    }
    return 0;
}
// } Driver Code Ends


/* Following is the Linked list node structure */

/*
struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
Node* findMid(Node* head){
    if(head == nullptr || head->next == nullptr)    return head;
    Node* slow = head;
    Node* fast = head;
    while(fast->next != nullptr && fast->next->next != nullptr){
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
Node* reverse(Node* head){
    if(head == nullptr || head->next == nullptr)    return head;
    Node* prev = nullptr;
    Node* curr = head;
    Node* frwd = head->next;
    while(frwd != nullptr){
        curr->next = prev;
        prev = curr;
        curr = frwd;
        frwd = frwd->next;
    }
    curr->next = prev;
    return curr;
}
void reorderList(Node* head) {
    if(head == nullptr || head->next == nullptr)    return;
    Node* mid = findMid(head);
    Node* new_head = reverse(mid->next);
    mid->next = nullptr;
    
    Node* c1 = head;
    Node* c2 = new_head;
    Node* f1 = nullptr;
    Node* f2 = nullptr;
    while(c1 != nullptr && c2 != nullptr){
        f1 = c1->next;
        f2 = c2->next;
        c1->next = c2;
        c2->next = f1;
        c1 = f1;
        c2 = f2;
    }
    
}












