class Solution {
public:
    unordered_map<string, string> parent;
    unordered_map<string, int> rank;
    
    string findPar(string& x){
        if(parent[x] == x)
            return x;
        parent[x] = findPar(parent[x]);
        return parent[x];
    }
    void dsu(string& u, string& v){
        string leaderOfU = findPar(u);
        string leaderOfV = findPar(v);
        
        if(leaderOfU != leaderOfV){
            if(rank[leaderOfU] > rank[leaderOfV]){
                parent[leaderOfV] = leaderOfU;
            }
            else if(rank[leaderOfU] < rank[leaderOfV]){
                parent[leaderOfU] = leaderOfV;
            }
            else{
                parent[leaderOfU] = leaderOfV;
                rank[leaderOfV]++;
            }
        }
    }
    bool areSentencesSimilarTwo(vector<string>& sentence1, vector<string>& sentence2, vector<vector<string>>& similarPairs) {
        for(vector<string> p : similarPairs){
            string u = p[0], v = p[1];
            parent[u] = u;
            parent[v] = v;
            rank[u] = 0;
            rank[v] = 0;
        }
        for(string st:sentence1)
            parent[st] = st;
        for(string st:sentence2)
            parent[st] = st;
        
        for(vector<string> p : similarPairs){
            string u = p[0], v = p[1];
            dsu(u, v);
        }
        
        int n1 = sentence1.size(), n2 = sentence2.size(), i=0, j=0;
        if(n1 != n2)
            return false;
        
        while(i < n1){
            string p1 = findPar(sentence1[i]);
            string p2 = findPar(sentence2[i]);
            
            if(p1 != p2)
                return false;
            i++;
        }
        return true;
    }
};
