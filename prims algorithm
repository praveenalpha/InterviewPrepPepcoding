#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <algorithm>
#include <utility>

using namespace std;

int main() {

    int N,M;
	cin>>N>>M;
	vector<vector<pair<int, int> > > graph(N, vector<pair<int, int> > ());
	for(int x=0;x<M;x++){
		int i,j, k;
		cin>>i>>j>>k;
		graph[i-1].push_back({j-1, k});
		graph[j-1].push_back({i-1, k});
	}
	
	long long int ans=0;
	
	vector<bool> vis(N);
	
	priority_queue<pair<int, int>, vector<pair<int, int> > , greater<pair<int, int> > > pq;
	pq.push({0, 0});
	
	
	while(pq.size()){
		pair<int , int> rpair = pq.top();
		pq.pop();
		
		if(vis[rpair.first] == false){
			vis[rpair.first] = true;
			ans += rpair.second;	
		}
		
		vector<pair<int, int> > nbrs = graph[rpair.first];
		for(pair<int, int> nbr : nbrs){
			if(vis[nbr.first] == false){
				pq.push({nbr.first, nbr.second});
			}
		}
	}
	
	cout<<ans;
	return 0;
}
