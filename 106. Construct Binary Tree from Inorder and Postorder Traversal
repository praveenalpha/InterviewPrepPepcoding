/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
        int ps = 0, pe = post.size() - 1, is = 0, ie = in.size()-1;
        TreeNode* root = construct(post, ps, pe, in, is, ie);
        return root;
    }
    TreeNode* construct(vector<int>& post, int ps, int pe, vector<int>& in, int is, int ie){
        if(ps > pe || is > ie)
            return nullptr;
        
        TreeNode* root = new TreeNode();
        root->val = post[pe];
        
        int idx = -1;
        for(int i=is;i<=ie;i++){
            if(in[i] == post[pe]){
                idx = i;
                break;
            }
        }
        
        int count = ie - idx;
        root->left = construct(post, ps, pe - count - 1, in, is, idx-1 );
        root->right = construct(post, pe - count, pe - 1, in, idx+1, ie);
        return root;
            
    }
        
};
