// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    void helper(vector<vector<char>>& grid, int i, int j ,int m, int n){
        grid[i][j] = '0';
        if(j + 1 < n && grid[i][j+1] == '1'){
            helper(grid, i, j+1, m, n);    
        }
        if(j+1 < n && i+1 < m && grid[i+1][j+1] == '1'){
            helper(grid, i+1, j+1, m, n);
        }
        if(i+1 < m && grid[i+1][j] == '1'){
            helper(grid, i+1, j, m, n);
        }
        if(i+1 < m && j-1 >= 0 && grid[i+1][j-1] == '1'){
            helper(grid, i+1, j-1, m, n);
        }
        if(j-1 >= 0 && grid[i][j-1] == '1'){
            helper(grid, i, j-1, m, n);
        }
        if(i-1 >= 0 && j-1 >= 0 && grid[i-1][j-1] == '1'){
            helper(grid, i-1, j-1, m, n);
        }
        if(i-1 >= 0 && grid[i-1][j] == '1'){
            helper(grid, i-1, j, m, n);
        }
        if(i-1 >= 0 && j+1 < n && grid[i-1][j+1] == '1'){
            helper(grid, i-1, j+1, m, n);
        }
        
    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int ans = 0;
        int m = grid.size();
        int n = grid[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == '1'){
                    ++ans;
                    helper(grid, i, j, m, n);
                }
            }
        }
        return ans;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>grid(n, vector<char>(m, '#'));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.numIslands(grid);
		cout << ans <<'\n';
	}
	return 0;
}  // } Driver Code Ends
