class Solution {
public:
    bool wordPattern(string& p, string& s) {
        vector<string> words;
        string curr = "";
        for(char ch : s){
            if(ch == ' '){
                words.push_back(curr);
                curr = "";
            }
            else    curr += ch;
        }
        if(curr.size() > 0) words.push_back(curr);
        
        int n = p.length();
        if(n != words.size())   return false;
        
        unordered_map<char, string> mp;
        unordered_set<string> st;
        for(int i=0;i<n;i++){
            if(mp.find(p[i]) ==  mp.end()){
                if(st.find(words[i]) != st.end())   return false;
                mp[p[i]] = words[i];
                st.insert(words[i]);
            }
            else{
                if(mp[p[i]] != words[i])
                    return false;
            }
        }
        return true;
    }
};
