class Solution {
public:
    void helper(vector<vector<char>>& grid, int i, int j, int m, int n){
        grid[i][j] = '0';
        if(i+1 < m && grid[i+1][j] == '1'){
            helper(grid, i+1, j, m, n);
        }
        if(j - 1 >= 0 && grid[i][j-1] == '1'){
            helper(grid, i, j-1, m, n);
        }
        if(i - 1 >= 0 && grid[i-1][j] == '1'){
            helper(grid, i-1, j, m, n);
        }
        if(j + 1 < n && grid[i][j+1] == '1'){
            helper(grid, i, j+1, m, n);
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int ans = 0;
        int m=grid.size();
        int n = grid[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == '1'){
                    ans++;
                    helper(grid, i, j, m, n);
                }
            }
        }
        return ans;
    }
};
