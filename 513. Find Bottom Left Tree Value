/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, int hl, int ht, int &min_hl, int &max_ht, int &ans){
        if(root == nullptr) return;
        if(max_ht < ht){
            ans = root->val;
            max_ht = ht;
            min_hl = hl;
        }
        if(max_ht == ht){
            if(min_hl > hl){
                ans = root->val;
                min_hl = hl;
            }
        }
        helper(root->left, hl-1, ht+1, min_hl, max_ht, ans);
        helper(root->right, hl+1, ht+1, min_hl, max_ht, ans);
    }
    int findBottomLeftValue(TreeNode* root) {
        int hl=0, ht = 0, min_hl = INT_MAX, max_ht = INT_MIN;
        int ans = root->val;
        helper(root, hl, ht, min_hl, max_ht, ans);
        return ans;
    }
};
