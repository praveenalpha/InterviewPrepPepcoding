// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


 // } Driver Code Ends

class Solution 
{
    public:
    bool isValid(int arr[N][N], int i, int j, int val){
        for(int x=0;x<9;x++){
            if(arr[x][j] == val)
                return false;
        }
        for(int y=0;y<9;y++){
            if(arr[i][y] == val)
                return false;
        }
        int row = i - (i%3);
        int column = j - (j%3);
        for(int x=0;x<3;x++){
            for(int y=0;y<3;y++){
                if(arr[x+row][y+column]==val)
                    return false;
            }
        }
        return true;
    }
    bool solve(int arr[N][N], int i, int j){
        if(i == 9)
            return true;
        if(j == 9)
            return solve(arr, i+1, 0);
        if(arr[i][j] != 0)  return solve(arr, i, j+1);
        for(int val = 1;val <=9;val++){
            if(isValid(arr, i,j,val))
                {
                    arr[i][j] = val;
                    if(solve(arr, i, j+1))
                        return true;
                    arr[i][j] = 0;
                }
        }
        return false;
    }
    //Function to find a solved Sudoku. 
    bool SolveSudoku(int grid[N][N])  
    { 
        return solve(grid, 0, 0);
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int arr[N][N]) 
    {
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                cout<<arr[i][j]<<" ";
            }
            // cout<<endl;
        }
        // Your code here 
    }
};

// { Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}  // } Driver Code Ends
