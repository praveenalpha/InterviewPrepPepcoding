class Solution {
public:
    int cherry(vector<vector<int>>& grid, int r1, int c1, int r2, int c2, vector<vector<vector<vector<int>>>>& dp){
        int n1 = grid.size(), n2 = grid[0].size();
        if(r1 >= n1 || r2 >= n1 || c1 >= n2 || c2 >= n2)
            return INT_MIN;
        if(grid[r1][c1] == -1 || grid[r2][c2] == -1)
            return INT_MIN;
        
        if(r1 == n1-1 && c1 == n2 - 1 && r2 == n1-1 && c2 == n2-1)
            return grid[r1][c1];
        
        if(dp[r1][c1][r2][c2] != -2)
            return dp[r1][c1][r2][c2];
        
        int ans = 0;
            
        int call1 = cherry(grid, r1 + 1, c1, r2+1, c2, dp);
        int call2 = cherry(grid, r1, c1+1, r2, c2+1, dp);
        int call3 = cherry(grid, r1 + 1, c1, r2, c2+1, dp);
        int call4 = cherry(grid, r1, c1+1, r2+1, c2, dp);
        ans = max(max(call1, call2), max(call3, call4));
        
        if(ans == INT_MIN){
            dp[r1][c1][r2][c2] = INT_MIN;
            return INT_MIN;
        }
            
        if(r1 == r2 &&  c1 == c2){
            ans += grid[r1][c1];
        }
        else{
            ans += grid[r1][c1] + grid[r2][c2];
        }
        dp[r1][c1][r2][c2] = ans;
        return ans;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int n1 = grid.size(), n2 = grid[0].size();
        vector<vector<vector<vector<int>>>> dp(n1, vector<vector<vector<int>>> (n2, vector<vector<int>> (n1, vector<int> (n2, -2))));
        int ans = cherry(grid, 0, 0, 0, 0, dp);
        if(ans == INT_MIN)
            return 0;
        return ans;
    }
};
