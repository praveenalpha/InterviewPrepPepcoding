class Solution {
public:
    int solve(vector<int>& arr, int n, int x, int idx, vector<vector<int>>& dp){
        if(x == 0){  return 0; }
        if(idx == n)    return INT_MAX;
        if(dp[idx][x] != -1)  return dp[idx][x];
        int ans = INT_MAX;
        if(x - arr[idx] >= 0){
            ans = solve(arr, n, x-arr[idx], idx, dp);
            ans = ans == INT_MAX ? INT_MAX : ans + 1;
        }   
        ans = min(ans, solve(arr, n, x, idx+1, dp));
        return dp[idx][x] = ans == INT_MAX ? INT_MAX : ans;
    }
    int coinChange(vector<int>& arr, int x) {
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int> (x+1, -1));
        int ans = solve(arr, n, x, 0, dp);
        return ans == INT_MAX ? -1 : ans;
    }
};
