// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int countWays(int N, string S){
        int  n = (N + 1) / 2;
        string s="",o="";
        int mod = 1003;
        for(int i=0;i<N;i++){
            if(i%2 == 0){
                s+=S[i];
            }
            else{
                o+=S[i];
            }
        }
        vector<vector<long long int>> dpt(n, vector<long long int> (n));
        vector<vector<long long int>> dpf(n, vector<long long int> (n));
                
        for(int gap = 0;gap < n;gap++){
            for(int i=0,j=gap;j<n;i++,j++){
                
                if(gap == 0){
                    if(s[i] == 'T'){
                        dpt[i][j] = 1;
                    }
                    else if(s[i] == 'F')
                        dpf[i][j] = 1;
                    
                }
                else{
                    // cout<<i<<", "<<j<<endl;
                    for(int k = i;k<j;k++){
                        char oprtr = o[k];
                        // T|T&F^T
                        // 0123456
                        // n = 4
                        // i = 0 ; j = 3
                        // k = 0, 1, 2
                        // oprtr = 0*2 + 1 = 1  1*2 + 1 = 3 2*2 + 1 = 5
                        int ltc = dpt[i][k];
                        int lfc = dpf[i][k];
                        int rtc = dpt[k+1][j];
                        int rfc = dpf[k+1][j];
                        if(oprtr == '&'){
                            dpt[i][j] =  ( (dpt[i][j]%mod) + ((ltc%mod)*(rtc%mod))%mod )%mod;
                            
                            dpf[i][j] = ((dpf[i][j]%mod) + ((ltc%mod) * (rfc%mod))%mod )%mod;
                            dpf[i][j] = ((dpf[i][j]%mod) + ((lfc%mod) * (rfc%mod))%mod )%mod;
                            dpf[i][j] = ((dpf[i][j]%mod) + ((lfc%mod) * (rtc%mod))%mod )%mod;
                            
                        }
                        else if(oprtr == '|'){
                            dpt[i][j] = ((dpt[i][j]%mod) + (( (ltc % mod) * (rtc % mod) ) % mod) ) % mod;
                            dpt[i][j] = ((dpt[i][j]%mod) + (( (lfc % mod) * (rtc % mod) ) % mod) ) % mod;
                            dpt[i][j] = ((dpt[i][j]%mod) + (((ltc % mod ) * (rfc % mod) ) % mod) ) % mod;
                            
                            dpf[i][j] = ((dpf[i][j] % mod) + (((lfc % mod )* (rfc % mod )) % mod )) % mod;
                            
                        }
                        else if(oprtr == '^'){
                            dpt[i][j] = ((dpt[i][j] % mod) + (((lfc % mod) * (rtc % mod)) % mod )) % mod;
                            dpt[i][j] = ((dpt[i][j] % mod) + (((ltc % mod) * (rfc % mod)) % mod) ) % mod;
                            dpf[i][j] = ((dpf[i][j] % mod) + (((rfc % mod) * (lfc % mod)) % mod) ) % mod;
                            dpf[i][j] = ((dpf[i][j] % mod) + (((ltc % mod) * (rtc % mod)) % mod) ) % mod;
                             
                        }
                    }
                }
                    
            }
        }
        return dpt[0][n-1];
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        string S;
        cin>>S;
        
        Solution ob;
        cout<<ob.countWays(N, S)<<"\n";
    }
    return 0;
}  // } Driver Code Ends
