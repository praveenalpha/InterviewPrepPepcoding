// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends



class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    void helper(Node* root, int level, pair<int, int>& ans){
        ans.first = min(ans.first, level);
        ans.second = max(ans.second, level);
        if(root->left != nullptr)
            helper(root->left, level-1, ans);
        if(root->right != nullptr)
            helper(root->right, level+1, ans);
        
    }
    vector<int> topView(Node *root)
    {
        pair<int, int> minMax;
        helper(root, 0, minMax);
        
        int width = minMax.second - minMax.first + 1;
        
        vector<int> ans(width, -1);
        
        queue<pair<Node*, int>> q;
        q.push({root, abs(minMax.first)});
        
        while(q.size() > 0){
            int size = q.size();
            while(size--){
                pair<Node*, int> rnode = q.front();
                q.pop();
                
                if(ans[rnode.second] == -1)
                    ans[rnode.second] = rnode.first->data;
                
                if(rnode.first->left != nullptr)
                    q.push({rnode.first->left, rnode.second - 1});
                    
                if(rnode.first->right != nullptr)
                    q.push({rnode.first->right, rnode.second + 1});
                    
                
            }
        }
        return ans;
    }

};
























// { Driver Code Starts.

int main() {
    int tc;
    cin>>tc;
    cin.ignore(256, '\n');
    while (tc--) {
        string treeString;
        getline(cin, treeString);
        Solution ob;
        Node *root = buildTree(treeString);
        vector<int> vec = ob.topView(root);
        for(int x : vec)
            cout<<x<<" ";
        cout<<endl;
    }
    return 0;
}  // } Driver Code Ends
