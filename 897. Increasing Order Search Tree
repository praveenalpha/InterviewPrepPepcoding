/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void storeInStack(stack<int>& st, TreeNode* root){
        if(root == nullptr)
            return;
        if(root->right != nullptr)
            storeInStack(st, root->right);
        
        st.push(root->val);
        
        if(root->left != nullptr)
            storeInStack(st, root->left);
    }
    TreeNode* create(stack<int>& st){
        TreeNode* root = new TreeNode(st.top());
        st.pop();
        TreeNode* temp = root;
        while(st.size()!= 0){
            TreeNode* node = new TreeNode(st.top());
            temp->right = node;
            temp = node;
            st.pop();
        }
        return root;
    }
    TreeNode* increasingBST(TreeNode* root) {
        stack<int> st;
        storeInStack(st, root);
        return create(st);
    }
};
