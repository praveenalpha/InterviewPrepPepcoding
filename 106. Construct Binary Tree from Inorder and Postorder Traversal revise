/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// post[9,15,7,20,3]
//     [0,1 ,2,3 ,4]
// in  [9,3,15,20,7]
class Solution {
public:
    int find(int val, vector<int>& in, int si, int ei){
        for(int i=si;i<=ei;i++) if(val == in[i])    return i;
        return -1;
    }
    TreeNode* construct(int si_p, int ei_p, int si_i, int ei_i, vector<int> &in, vector<int> &post){
        if(si_p > ei_p) return nullptr;
        if(si_p == ei_p)    return new TreeNode(post[ei_p]);
        TreeNode* root = new TreeNode(post[ei_p]);
        int idx = find(post[ei_p], in, si_i, ei_i);
        int length_of_nodes_in_right_subtree = ei_i - idx;
        root->left = construct(si_p, ei_p - length_of_nodes_in_right_subtree - 1, si_i, idx-1, in, post);
        root->right = construct(ei_p - length_of_nodes_in_right_subtree, ei_p-1, idx + 1, ei_i, in, post);
        return root;
    }
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
        int n = in.size();
        return construct(0, n-1, 0, n-1, in, post);
    }
};
